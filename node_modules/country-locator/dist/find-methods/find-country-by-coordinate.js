"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCountryByCoordinate = void 0;
const coordinate_validation_1 = require("../validation/coordinate-validation");
const all_countries_1 = require("../common/constants/all-countries");
const boolean_point_in_polygon_1 = __importDefault(require("@turf/boolean-point-in-polygon"));
const helpers_1 = require("@turf/helpers");
const countries_geojson_utils_1 = require("../common/utils/countries-geojson-utils");
/**
 * Determines if a given point is in a territory of a country or not
 */
const isPointInCountry = (country, point) => {
    const { type: countryGeoType, coordinates: countryCoordinates } = country.geometry;
    if (countryGeoType === 'Polygon') {
        return boolean_point_in_polygon_1.default(point, helpers_1.polygon(countryCoordinates));
    }
    else if (countryGeoType === 'MultiPolygon') {
        return boolean_point_in_polygon_1.default(point, helpers_1.multiPolygon(countryCoordinates));
    }
    return false;
};
function findCountryByCoordinate(pointOrLat, longitude) {
    var _a;
    const coordinate = coordinate_validation_1.validateCoordinate(pointOrLat, longitude);
    const countryFound = (_a = all_countries_1.COUNTRIES_GEO_JSON.features) === null || _a === void 0 ? void 0 : _a.find((country) => isPointInCountry(country, coordinate));
    if (!countryFound)
        return;
    return countries_geojson_utils_1.extractCountryInfoFromCountryFeature(countryFound);
}
exports.findCountryByCoordinate = findCountryByCoordinate;
//# sourceMappingURL=find-country-by-coordinate.js.map