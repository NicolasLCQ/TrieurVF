"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCountriesByPolygon = void 0;
const intersect_1 = __importDefault(require("@turf/intersect"));
const helpers_1 = require("@turf/helpers");
const all_countries_1 = require("../common/constants/all-countries");
const polygon_validation_1 = require("../validation/polygon-validation");
const countries_geojson_utils_1 = require("../common/utils/countries-geojson-utils");
const countryIntersectsWithPolygon = (country, polygon) => {
    const { properties, geometry } = country;
    if (properties.ISO_A3 === all_countries_1.NOT_A_COUNTRY_CODE)
        return false;
    if (geometry.type === 'Polygon') {
        try {
            return intersect_1.default(helpers_1.polygon(geometry.coordinates), polygon) !== null;
        }
        catch (_a) {
            return false;
        }
    }
    else if (geometry.type === 'MultiPolygon') {
        return geometry.coordinates.some((coordinate) => {
            try {
                const countryTurfPolygon = helpers_1.polygon(coordinate);
                return intersect_1.default(countryTurfPolygon, polygon) !== null;
            }
            catch (_a) {
                return false;
            }
        });
    }
    return false;
};
/**
 * Finds countries that intersect with a given polygon.
 * @param polygon - a polygon of coordinates - has to be at least 4 points.
 * @return CountryInfo[] - array of countries (code and name) that intersect
 * with the given polygon. empty array if the polygon doesn't intersect anything.
 */
function findCountriesByPolygon(polygon) {
    const validPolygon = polygon_validation_1.validatePolygon(polygon);
    const countriesInIntersection = all_countries_1.COUNTRIES_GEO_JSON.features
        .filter(country => countryIntersectsWithPolygon(country, validPolygon));
    return countriesInIntersection.map(countries_geojson_utils_1.extractCountryInfoFromCountryFeature);
}
exports.findCountriesByPolygon = findCountriesByPolygon;
//# sourceMappingURL=find-countries-by-polygon.js.map